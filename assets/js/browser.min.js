/**
 * browser.js v1.0 | @ajlkn | MIT licensed
 *
 * Lightweight browser detection library.
 *
 * @example
 * var browser = require('browser');
 * if (browser.name === 'chrome') {
 *   console.log('You are using Chrome!');
 * }
 *
 * @namespace
 */
var browser = function() {
  'use strict';

  /**
   * Name of the browser.
   *
   * @type {string}
   * @default null
   */
  var name = null;

  /**
   * Version of the browser.
   *
   * @type {number}
   * @default null
   */
  var version = null;

  /**
   * Operating system.
   *
   * @type {string}
   * @default null
   */
  var os = null;

  /**
   * Operating system version.
   *
   * @type {number}
   * @default null
   */
  var osVersion = null;

  /**
   * Whether the browser supports touch events.
   *
   * @type {boolean}
   * @default null
   */
  var touch = null;

  /**
   * Whether the browser is mobile.
   *
   * @type {boolean}
   * @default null
   */
  var mobile = null;

  /**
   * Checks whether a CSS property is supported.
   *
   * @param {string} property - CSS property to check.
   * @return {boolean}
   */
  var canUse = function(property) {
    if (!e._canUse) {
      e._canUse = document.createElement('div');
    }
    var prefix = property.charAt(0).toUpperCase() + property.slice(1);
    return property in e._canUse.style ||
      'Moz' + prefix in e._canUse.style ||
      'Webkit' + prefix in e._canUse.style ||
      'O' + prefix in e._canUse.style ||
      'ms' + prefix in e._canUse.style;
  };

  /**
   * Initializes the browser object.
   */
  var init = function() {
    var userAgent = navigator.userAgent;
    var browserRegExps = [
      ['firefox', /Firefox\/([0-9\.]+)/],
      ['bb', /BlackBerry.+Version\/([0-9\.]+)/],
      ['bb', /BB[0-9]+.+Version\/([0-9\.]+)/],
      ['opera', /OPR\/([0-9\.]+)/],
      ['opera', /Opera\/([0-9\.]+)/],
      ['edge', /Edge\/([0-9\.]+)/],
      ['safari', /Version\/([0-9\.]+).+Safari/],
      ['chrome', /Chrome\/([0-9\.]+)/],
      ['ie', /MSIE ([0-9]+)/],
      ['ie', /Trident\/.+rv:([0-9]+)/]
    ];
    var osRegExps = [
      ['ios', /([0-9_]+) like Mac OS X/, function(version) {
        return version.replace('_', '.').replace('_', '');
      }],
      ['ios', /CPU like Mac OS X/, function() {
        return 0;
      }],
      ['wp', /Windows Phone ([0-9\.]+)/, null],
      ['android', /Android ([0-9\.]+)/, null],
      ['mac', /Macintosh.+Mac OS X ([0-9_]+)/, function(version) {
        return version.replace('_', '.').replace('_', '');
      }],
      ['windows', /Windows NT ([0-9\.]+)/, null],
      ['bb', /BlackBerry.+Version\/([0-9\.]+)/, null],
      ['bb', /BB[0-9]+.+Version\/([0-9\.]+)/, null],
      ['linux', /Linux/, null],
      ['bsd', /BSD/, null],
      ['unix', /X11/, null]
    ];

    for (var i = 0; i < browserRegExps.length; i++) {
      if (userAgent.match(browserRegExps[i][1])) {
        name = browserRegExps[i][0];
        version = parseFloat(RegExp.$1);
        break;
      }
    }

    for (var i = 0; i < osRegExps.length; i++) {
      if (userAgent.match(osRegExps[i][1])) {
        os = osRegExps[i][0];
        osVersion = parseFloat(osRegExps[i][2]?osRegExps[i][2](RegExp.$1):RegExp.$1);
        break;
      }
    }

    touch = 'wp' === os? navigator.msMaxTouchPoints > 0 : !!('ontouchstart' in window);
    mobile = 'wp' === os || 'android' === os || 'ios' === os || 'bb' === os;
  };

  return {
    init: init,
    name: name,
    version: version,
    os: os,
    osVersion: osVersion,
    touch: touch,
    mobile: mobile,
    canUse: canUse
  };
}();

!function(e, n) {
  'function' === typeof define && define.amd ? define([], n) : 'object' === typeof exports ? module.exports = n() : e.browser = n();
}(this, function() {
  return browser;
});
